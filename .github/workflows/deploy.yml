name: CI/CD with Terraform Template 
on:
  push:
    branches:
      - master 
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
  
jobs:
  deploy-ec2-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false 
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform init 
        id: init
        run: terraform init
        working-directory: ./terraform
      - name: Terraform plan
        id: plan
        run: |-
          terraform plan \
          -var "region=${AWS_REGION}" \
          -var "public_key=${SSH_PUBLIC_KEY}" \
          -var "private_key=${SSH_PRIVATE_KEY}" \
          -out=PLAN
        working-directory: ./terraform 
      - name: Terraform apply
        id: apply
        run: terraform apply PLAN 
        working-directory: ./terraform
      - name: Set output
        run: |-
          echo "instance_public_ip=$(terraform output ec2_server_eip_public)" >> "$GITHUB_OUTPUT"
        working-directory: ./terraform
  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-ec2-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set SERVER_PUBLIC_IP env variable
        run: echo SERVER_PUBLIC_IP=${{ needs.deploy-ec2-infra.outputs.SERVER_PUBLIC_IP }} >> "$GITHUB_ENV"
      - name: Login to AWS ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1 
      - name: Build, tag, and push docker image to AWS ECR
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: go-sample-app-repo
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: ${AWS_REGION}
        run: |-
          docker pull similoluwaokunowo/go-docker-sample-app 
          docker tag similoluwaokunowo/go-docker-sample-app $REGISTRY/$REPOSITORY:$IMAGE_TAG 
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      - name: Deploy docker image to EC2 instance
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: go-sample-app-repo
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: ${AWS_REGION}
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu 
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: PRIVATE_SSH_KEY,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION,AWS_DEFAULT_REGION
          script: |-
            sudo apt update 
            sudo apt install docker.io -y
            sudo apt install awscli
            sudo $(aws ecr get-login --no-include-email --region ${AWS_REGION})
            sudo docker stop go-sample-app-container  || true 
            sudo docker rm go-sample-app-container || true
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name go-sample-app-container -p 80:5045 $REGISTRY/$REPOSITORY:$IMAGE_TAG

